#!/bin/bash
set -e

# MCP Server Configuration Backup Script
# Creates a complete backup of MCP configurations before making changes

echo "📦 MCP SERVER BACKUP CREATION"
echo "=============================="

# Create backup directory with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="./backups/$TIMESTAMP"
mkdir -p "$BACKUP_DIR"

echo "📁 Creating backup in: $BACKUP_DIR"

# Function to backup file with validation
backup_file() {
    local src="$1"
    local dest="$2"
    local name="$3"
    
    if [ -f "$src" ]; then
        echo "  ✅ Backing up $name..."
        cp "$src" "$dest"
        
        # Validate backup
        if [ -f "$dest" ]; then
            local src_size=$(stat -c%s "$src" 2>/dev/null || stat -f%z "$src" 2>/dev/null)
            local dest_size=$(stat -c%s "$dest" 2>/dev/null || stat -f%z "$dest" 2>/dev/null)
            
            if [ "$src_size" -eq "$dest_size" ]; then
                echo "    📋 Backup verified ($src_size bytes)"
            else
                echo "    ⚠️  Backup size mismatch!"
            fi
        else
            echo "    ❌ Backup failed!"
            return 1
        fi
    else
        echo "  ⚠️  $name not found: $src"
        return 1
    fi
}

echo ""
echo "🔄 Backing up configuration files..."

# Backup Roo MCP settings
ROO_CONFIG="c:/Users/JamesCameron/AppData/Roaming/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/mcp_settings.json"
backup_file "$ROO_CONFIG" "$BACKUP_DIR/roo_mcp_settings.json" "Roo MCP settings"

# Backup Claude Desktop config
CLAUDE_CONFIG="c:/Users/JamesCameron/AppData/Roaming/Claude/claude_desktop_config.json"
backup_file "$CLAUDE_CONFIG" "$BACKUP_DIR/claude_desktop_config.json" "Claude Desktop config"

# Backup package.json
backup_file "./package.json" "$BACKUP_DIR/package.json" "package.json"

echo ""
echo "🔑 Documenting environment variables..."

# Document environment variables (without exposing secrets in logs)
ENV_FILE="$BACKUP_DIR/env_vars.txt"
{
    echo "# Environment Variables Backup - $(date)"
    echo "# Generated by create-backup.sh"
    echo ""
    
    # Check for GitHub API token
    if [ -n "$GITHUB_API_TOKEN" ]; then
        echo "GITHUB_API_TOKEN=***PRESENT***"
        echo "# Actual value: $GITHUB_API_TOKEN" 
    else
        echo "GITHUB_API_TOKEN=***NOT_SET***"
    fi
    
    # Check for Vercel API token
    if [ -n "$VERCEL_API_TOKEN" ]; then
        echo "VERCEL_API_TOKEN=***PRESENT***"
        echo "# Actual value: $VERCEL_API_TOKEN"
    else
        echo "VERCEL_API_TOKEN=***NOT_SET***"
    fi
    
    # Check for other common environment variables
    if [ -n "$BRAVE_SEARCH_API_KEY" ]; then
        echo "BRAVE_SEARCH_API_KEY=***PRESENT***"
        echo "# Actual value: $BRAVE_SEARCH_API_KEY"
    fi
    
    if [ -n "$OPENAI_API_KEY" ]; then
        echo "OPENAI_API_KEY=***PRESENT***"
        echo "# Actual value: $OPENAI_API_KEY"
    fi
    
} > "$ENV_FILE"

echo "  ✅ Environment variables documented"

echo ""
echo "📊 Creating system state snapshot..."

# Create system state documentation
STATE_FILE="$BACKUP_DIR/system_state.md"
{
    echo "# System State Snapshot"
    echo "Generated: $(date)"
    echo "Git Commit: $(git rev-parse HEAD 2>/dev/null || echo 'Not a git repository')"
    echo "Git Branch: $(git branch --show-current 2>/dev/null || echo 'Unknown')"
    echo ""
    
    echo "## Git Status"
    echo "\`\`\`"
    git status --porcelain 2>/dev/null || echo "Not a git repository"
    echo "\`\`\`"
    echo ""
    
    echo "## Node.js Version"
    echo "\`\`\`"
    node --version 2>/dev/null || echo "Node.js not found"
    echo "\`\`\`"
    echo ""
    
    echo "## NPM Version"
    echo "\`\`\`"
    npm --version 2>/dev/null || echo "NPM not found"
    echo "\`\`\`"
    echo ""
    
    echo "## Package.json Scripts"
    echo "\`\`\`"
    if [ -f "./package.json" ]; then
        grep -A 20 '"scripts"' package.json || echo "No scripts found"
    else
        echo "package.json not found"
    fi
    echo "\`\`\`"
    echo ""
    
    echo "## Running Processes (MCP related)"
    echo "\`\`\`"
    ps aux | grep -i mcp | grep -v grep || echo "No MCP processes found"
    echo "\`\`\`"
    
} > "$STATE_FILE"

echo "  ✅ System state snapshot created"

echo ""
echo "🔍 Backup validation..."

# Validate backup directory
BACKUP_COUNT=$(find "$BACKUP_DIR" -type f | wc -l)
echo "  📁 Files backed up: $BACKUP_COUNT"

# List backup contents
echo "  📋 Backup contents:"
find "$BACKUP_DIR" -type f -exec basename {} \; | sort | sed 's/^/    /'

# Calculate backup size
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
echo "  📦 Total backup size: $BACKUP_SIZE"

echo ""
echo "✅ BACKUP COMPLETED SUCCESSFULLY!"
echo ""
echo "📋 Backup Summary:"
echo "  🕐 Timestamp: $TIMESTAMP"
echo "  📁 Location: $BACKUP_DIR"
echo "  📦 Size: $BACKUP_SIZE"
echo "  📄 Files: $BACKUP_COUNT"
echo ""
echo "🚨 Emergency restore command:"
echo "  ./scripts/emergency-restore.sh"
echo ""
echo "🔍 To view backup contents:"
echo "  ls -la $BACKUP_DIR"
echo ""
echo "Ready for safe git push! 🚀"